unit uCadastroCliente;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Grids, Vcl.ComCtrls, Vcl.ExtCtrls,
  Vcl.StdCtrls, Datasnap.Provider, Data.DB, Datasnap.DBClient, uDM, Vcl.DBGrids,
  Vcl.Mask, Vcl.DBCtrls, Vcl.DBActns, System.Actions, Vcl.ActnList,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.Client, FireDAC.Comp.DataSet;

type
  TfmCliente = class(TForm)
    pnTop: TPanel;
    pnCli: TPanel;
    pnButon: TPanel;
    pgDadosCadastrais: TPageControl;
    Clientes: TTabSheet;
    DadosCadastrais: TTabSheet;
    btNovo: TButton;
    btAlterar: TButton;
    btCancelar: TButton;
    btExcluir: TButton;
    btImprimir: TButton;
    btSair: TButton;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    dsCli: TDataSource;
    DBGrid: TDBGrid;
    btGravar: TButton;
    edtRazao: TDBEdit;
    edtFantasia: TDBEdit;
    DBEdit1: TDBEdit;
    DBEdit2: TDBEdit;
    DBEdit3: TDBEdit;
    edCNPJ: TDBEdit;
    DBEdit5: TDBEdit;
    ActionList: TActionList;
    DatasetInsert: TDataSetInsert;
    DatasetFirst1: TDataSetFirst;
    DatasetPrior1: TDataSetPrior;
    DatasetNext1: TDataSetNext;
    DatasetLast1: TDataSetLast;
    DatasetDelete1: TDataSetDelete;
    DatasetEdit1: TDataSetEdit;
    DatasetPost1: TDataSetPost;
    DatasetCancel1: TDataSetCancel;
    DatasetRefresh1: TDataSetRefresh;
    procedure btSairClick(Sender: TObject);
    procedure btGravarClick(Sender: TObject);
    procedure btNovoClick(Sender: TObject);
    procedure FDTCliAfterOpen(DataSet: TDataSet);
    procedure btAlterarClick(Sender: TObject);
  private
    { Private declarations }
    function validaCNPJ(CNPJ: string): boolean;
    function imprimeCNPJ(CNPJ: string): string;
  public
    { Public declarations }
  end;

var
  fmCliente: TfmCliente;

implementation

{$R *.dfm}

procedure TfmCliente.btAlterarClick(Sender: TObject);
begin
  fmConexao.FDQCLI.Edit;
end;

procedure TfmCliente.btGravarClick(Sender: TObject);
begin
 fmconexao.FDQCLI.Append;
end;

procedure TfmCliente.btNovoClick(Sender: TObject);
begin
  fmconexao.FDQCLI.Insert;
end;

procedure TfmCliente.btSairClick(Sender: TObject);
begin
  Close;
end;

procedure TfmCliente.FDTCliAfterOpen(DataSet: TDataSet);
begin
  Dataset.Open;
end;

function TfmCliente.imprimeCNPJ(CNPJ: string): string;
begin
  { máscara do CNPJ: 99.999.999.9999-99 }
  imprimeCNPJ := copy(CNPJ, 1, 2) + '.' + copy(CNPJ, 3, 3) + '.' +
    copy(CNPJ, 6, 3) + '.' + copy(CNPJ, 9, 4) + '-' + copy(CNPJ, 13, 2);
end;

function TfmCliente.validaCNPJ(CNPJ: string): boolean;
var   dig13, dig14: string;
    sm, i, r, peso: integer;
begin
// length - retorna o tamanho da string do CNPJ (CNPJ é um número formado por 14 dígitos)
  if ((CNPJ = '00000000000000') or (CNPJ = '11111111111111') or
      (CNPJ = '22222222222222') or (CNPJ = '33333333333333') or
      (CNPJ = '44444444444444') or (CNPJ = '55555555555555') or
      (CNPJ = '66666666666666') or (CNPJ = '77777777777777') or
      (CNPJ = '88888888888888') or (CNPJ = '99999999999999') or
      (length(CNPJ) <> 14))
     then begin
            validaCNPJ := false;
            exit;
          end;

// "try" - protege o código para eventuais erros de conversão de tipo através da função "StrToInt"
  try
{ *-- Cálculo do 1o. Digito Verificador --* }
    sm := 0;
    peso := 2;
    for i := 12 downto 1 do
    begin
// StrToInt converte o i-ésimo caractere do CNPJ em um número
      sm := sm + (StrToInt(CNPJ[i]) * peso);
      peso := peso + 1;
      if (peso = 10)
         then peso := 2;
    end;
    r := sm mod 11;
    if ((r = 0) or (r = 1))
       then dig13 := '0'
    else str((11-r):1, dig13); // converte um número no respectivo caractere numérico

{ *-- Cálculo do 2o. Digito Verificador --* }
    sm := 0;
    peso := 2;
    for i := 13 downto 1 do
    begin
      sm := sm + (StrToInt(CNPJ[i]) * peso);
      peso := peso + 1;
      if (peso = 10)
         then peso := 2;
    end;
    r := sm mod 11;
    if ((r = 0) or (r = 1))
       then dig14 := '0'
    else str((11-r):1, dig14);

{ Verifica se os digitos calculados conferem com os digitos informados. }
    if ((dig13 = CNPJ[13]) and (dig14 = CNPJ[14]))
       then validaCNPJ := true
    else validaCNPJ := false;
  except
    validaCNPJ := false
  end;
end;

end.
